import streamlit as st
import pandas as pd
import itertools
from fractions import Fraction

st.set_page_config(
    page_title="Erster Obstgarten mathematisch analysiert",
    page_icon="üçé"
)

def basis_vector(n, k):
    vec = [Fraction(0)] * n
    vec[k] = Fraction(1)
    return vec

def linear_combination(vectors, coefficients):
    n = len(vectors[0])
    result = [Fraction(0)] * n
    for vec, coeff in zip(vectors, coefficients):
        for i in range(n):
            result[i] += vec[i] * coeff
    return result

def calculate_states():
    states = []
    for rabe in range(7):
        for tree in itertools.product(range(5), repeat=4):
            state = tuple([rabe] + list(tree))
            states.append(state)

    probabilites = {}
    for state in states:
        if state[0] == 0: # Rabe hat den Obstgarten erreicht
            obst = sum(state[1:])
            probabilites[state] = (Fraction(0), Fraction(0), basis_vector(23, 16-obst), basis_vector(23, 16-obst))
        elif sum(state[1:]) == 0: # Kein Obst mehr auf B√§umen
            probabilites[state] = (Fraction(1), Fraction(1), basis_vector(23, 16+state[0]), basis_vector(23, 16+state[0]))
        else:
            # n = Anzahl der m√∂glichen Z√ºge sind Rabe, nicht-leere Farben und Obstkorb
            n = sum(1 for x in state if x != 0) + 1
            ps = [0, 0, 0, 0]
            for i in range(2):
                vectors = []
                coefficients = []
                # p = 1/n * p(Rabe im n√§chsten Zug) + ...
                new_state = (state[0]-1, ) + state[1:]
                probability = Fraction(probabilites[new_state][i], n)
                p = probability
                vectors.append(probabilites[new_state][i+2])
                coefficients.append(Fraction(1, n))
                for k in [1, 2, 3, 4]:
                    if state[k] != 0:
                        new_state = state[:k] + (state[k]-1, ) + state[k+1:]
                        # p = ... + 1/n * p(nicht-leere Farbe im n√§chsten Zug) + ...
                        probability = Fraction(probabilites[new_state][i], n)
                        p += probability
                        vectors.append(probabilites[new_state][i+2])
                        coefficients.append(Fraction(1, n))
                # Taktik, wenn Obstkorb gew√ºrfelt wird
                if i == 0:
                    k = state[1:].index(min(x for x in state[1:] if x > 0)) + 1
                else:
                    k = state[1:].index(max(state[1:])) + 1
                new_state = state[:k] + (state[k]-1, ) + state[k+1:]
                # p = ... + 1/n * p(Obstkorb im n√§chsten Zug)
                probability = Fraction(probabilites[new_state][i], n)
                p += probability
                vectors.append(probabilites[new_state][i+2])
                coefficients.append(Fraction(1, n))
                histogram = linear_combination(vectors, coefficients)
                ps[i] = p
                ps[i+2] = histogram
                if p != sum(histogram[17:]):
                    print(state, p, histogram)
                    raise ValueError("Histogramm passt nicht zur Wahrscheinlichkeit.")
            probabilites[state] = ps
    return probabilites

@st.cache_data
def get_cached_states():
    return calculate_states()

# Streamlit-App Hauptteil

"""
# Erster Obstgarten mathematisch analysiert
Dieses Tool berechnet die Gewinnwahrscheinlichkeiten f√ºr das Spiel **Erster Obstgarten**.

## Aktueller Spielzustand
Gib hier den Zustand des Spiels ein. Voreingestellt ist der Anfangszustand des Spiels, wo der Rabe 5 Felder vom Obstgarten entfernt ist und auf jedem Baum 4 Fr√ºchte liegen.
"""

rabe = st.number_input(label="üê¶‚Äç‚¨õ Rabe", min_value=0, max_value=6, value=5, step=1)

col1, col2, col3, col4 = st.columns(4)
min_val = 0
max_val = 4
step_val = 1
default_val = 4

with col1:
    input1 = st.number_input("üçè gr√ºne √Ñpfel", 
                             min_value=min_val, 
                             max_value=max_val, 
                             value=default_val, 
                             step=step_val)

with col2:
    input2 = st.number_input("üçé rote √Ñpfel", 
                             min_value=min_val, 
                             max_value=max_val, 
                             value=default_val, 
                             step=step_val)

with col3:
    input3 = st.number_input("üîµ Pflaumen", 
                             min_value=min_val, 
                             max_value=max_val, 
                             value=default_val, 
                             step=step_val)

with col4:
    input4 = st.number_input("üü° Birnen", 
                             min_value=min_val, 
                             max_value=max_val, 
                             value=default_val, 
                             step=step_val)

obst = input1 + input2 + input3 + input4

if obst == 0:
    if rabe == 0:
        st.write("ü§î Dieser Zustand kann nicht erreicht werden.")
    else:
        st.write(f"""
                 ## üéâ Gewonnen!
                 
                 Du hast gewonnen und das **Ergebnis {rabe}** erzielt, da der Rabe {rabe} {"Felder" if rabe > 1 else "Feld"} vom Obstgarten entfernt ist.
                 
                 Herzlichen Gl√ºckwunsch!""")
        st.balloons()
elif rabe == 0:
    st.write(f"""
             ## üò¢ Verloren.
             
             Du hast verloren und das **Ergebnis -{obst}** erzielt, da noch {obst} {"Fr√ºchte an den B√§umen h√§ngen." if obst > 1 else "Frucht am Baum h√§ngt."}
            """)
else:
    state = (rabe, input1, input2, input3, input4)
    p = get_cached_states()

    p_min, p_max, hist_min, hist_max = p[state]

    df = pd.DataFrame({
        "Ergebnis": list(range(-16, 7)),
        "Min-Strategie": [float(x) for x in hist_min],
        "Max-Strategie": [float(x) for x in hist_max]
    })

    def prob_to_str(x):
        if x >= 0.995:
            return f"{100*x:.1f} %"
        else:
            return f"{100*x:.0f} %"

    if prob_to_str(p_min) == prob_to_str(p_max):
        st.write(f"## Gewinn zu {prob_to_str(p_min)}")
    else:
        st.write(f"## Gewinn zu {prob_to_str(p_min)} bis {prob_to_str(p_max)}")

    # st.write(f"Der Rabe steht {rabe} Felder vor dem Gartenzaun und es h√§ngen noch {obst} Fr√ºchte an den B√§umen.")

    st.write(f"Die Gewinnwahrscheinlichkeit betr√§gt je nach Spieltaktik {float(p_min*100):.2f} % bis {float(p_max*100):.2f} %.")

    st.bar_chart(df, x="Ergebnis", stack=False)

    st.write("""
            Ein positives Ergebnis bedeutet, dass die Spieler gewinnen, indem sie alle Fr√ºchte in den Korb legen konnten und z√§hlt, wie viele Felder der Rabe vom Obstgarten am Spielende entfernt ist.

            Ein negatives Ergebnis bedeutet, dass die Spieler verlieren, da der Rabe den Obstgarten erreicht hat und z√§hlt, wie viele Fr√ºchte noch an den B√§umen h√§ngen.

            Ein Ergebnis von 0 ist nicht m√∂glich, da es kein Unentschieden geben kann.
            """)

    with st.expander("Exakte Wahrscheinlichkeiten"):
        st.write(f"""
                W√§hlt man beim W√ºrfeln eines Obstkorbes immer den Baum mit den *wenigsten* Fr√ºchten, so erh√§lt man die Gewinnwahrscheinlichkeit
                
                $p_\\text{{min}} = {p_min} \\approx {float(p_min)}$.

                W√§hlt man beim W√ºrfeln eines Obstkorbes immer den Baum mit den *meisten* Fr√ºchten, so erh√§lt man die Gewinnwahrscheinlichkeit
                
                $p_\\text{{max}} = {p_max} \\approx {float(p_max)}$.
                """)